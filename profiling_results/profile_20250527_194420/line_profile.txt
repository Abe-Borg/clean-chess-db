Timer unit: 1e-07 s

Total time: 0 s
File: C:\Users\Abrah\Dropbox\PC (3)\Desktop\clean-chess-db\environment\Environ.py
Function: get_curr_state_and_legal_moves at line 28

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    28                                               def get_curr_state_and_legal_moves(self) -> Tuple[Dict[str, Union[int, str]], List[chess.Move]]:
    29                                                   """
    30                                                   Get current state and legal moves in one call to avoid duplicate work.
    31                                                   This is the primary method for getting game state.
    32                                                   
    33                                                   Returns:
    34                                                       Tuple of (state_dict, legal_moves_list)
    35                                                   """
    36                                                   curr_turn = self.turn_list[self.turn_index]
    37                                                   legal_moves = list(self.board.legal_moves)
    38                                                   
    39                                                   # Return structured state without string conversions
    40                                                   state = {
    41                                                       'turn_index': self.turn_index, 
    42                                                       'curr_turn': curr_turn,
    43                                                       'white_to_move': self.board.turn == chess.WHITE,
    44                                                       'castling_rights': self.board.castling_rights,
    45                                                       'en_passant_square': self.board.ep_square,
    46                                                       'halfmove_clock': self.board.halfmove_clock,
    47                                                       'fullmove_number': self.board.fullmove_number
    48                                                   }
    49                                                   
    50                                                   return state, legal_moves

Total time: 0 s
File: C:\Users\Abrah\Dropbox\PC (3)\Desktop\clean-chess-db\environment\Environ.py
Function: push_move_object at line 65

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    65                                               def push_move_object(self, move: chess.Move) -> None:
    66                                                   """
    67                                                   Push a move object directly (fastest method).
    68                                                   
    69                                                   Args:
    70                                                       move: chess.Move object to apply
    71                                                   """
    72                                                   self.board.push(move)
    73                                                   self.update_curr_state()

Total time: 0 s
File: C:\Users\Abrah\Dropbox\PC (3)\Desktop\clean-chess-db\environment\Environ.py
Function: convert_san_to_move_object at line 85

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    85                                               def convert_san_to_move_object(self, san_move: str) -> chess.Move:
    86                                                   """
    87                                                   Convert SAN string to Move object for the current position.
    88                                                   
    89                                                   Args:
    90                                                       san_move: Move in Standard Algebraic Notation
    91                                                       
    92                                                   Returns:
    93                                                       chess.Move object
    94                                                       
    95                                                   Raises:
    96                                                       ValueError: If the move is invalid for the current position
    97                                                   """
    98                                                   return self.board.parse_san(san_move)
    99                                           
   100                                                   """
   101                                                   Legacy method - get the current state with SAN conversion.
   102                                                   Use get_curr_state_and_legal_moves() for better performance.
   103                                                   
   104                                                   Returns:
   105                                                       Dictionary with turn info and legal moves in SAN format
   106                                                   """
   107                                                   curr_turn = self.turn_list[self.turn_index]
   108                                                   legal_moves = self.get_legal_moves()
   109                                                   return {'turn_index': self.turn_index, 'curr_turn': curr_turn, 'legal_moves': legal_moves}

Total time: 0 s
File: C:\Users\Abrah\Dropbox\PC (3)\Desktop\clean-chess-db\training\game_simulation.py
Function: worker_process_games at line 265

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   265                                           def worker_process_games(game_indices_chunk: List[str], shared_data: Dict) -> List[str]:
   266                                               """
   267                                               Worker function that processes a chunk of games.
   268                                               
   269                                               Args:
   270                                                   game_indices_chunk: List of game IDs to process
   271                                                   shared_data: Shared memory data structure
   272                                                   
   273                                               Returns:
   274                                                   List of corrupted game IDs from this chunk
   275                                               """
   276                                               corrupted_games = []
   277                                               
   278                                               # Create reusable agents and environment
   279                                               w_agent = Agent('W')
   280                                               b_agent = Agent('B')
   281                                               environ = Environ()
   282                                               
   283                                               # Handle Windows vs Unix data access
   284                                               if shared_data.get('windows_mode', False):
   285                                                   # Windows: Direct DataFrame access
   286                                                   chess_data = shared_data['data']
   287                                                   
   288                                                   for game_id in game_indices_chunk:
   289                                                       try:
   290                                                           row = chess_data.loc[game_id]
   291                                                           ply_count = int(row['PlyCount'])
   292                                                           
   293                                                           # Extract moves
   294                                                           moves = {}
   295                                                           for col in chess_data.columns:
   296                                                               if col != 'PlyCount':
   297                                                                   moves[col] = row[col]
   298                                                           
   299                                                           # Process game
   300                                                           result = play_one_game(game_id, ply_count, moves, 
   301                                                                                w_agent, b_agent, environ)
   302                                                           if result is not None:
   303                                                               corrupted_games.append(result)
   304                                                           
   305                                                           # Reset for next game
   306                                                           environ.reset_environ()
   307                                                           
   308                                                       except Exception as e:
   309                                                           logger.critical(f"Error processing game {game_id}: {e}")
   310                                                           corrupted_games.append(game_id)
   311                                               else:
   312                                                   # Unix: Shared memory access
   313                                                   # Access shared memory arrays
   314                                                   indices_shm = shared_memory.SharedMemory(name=shared_data['indices']['shm_name'])
   315                                                   game_indices_arr = np.ndarray(tuple(shared_data['indices']['shape']), 
   316                                                                                dtype=np.dtype(shared_data['indices']['dtype']), 
   317                                                                                buffer=indices_shm.buf)
   318                                                   game_indices_list = game_indices_arr.tolist()
   319                                                   
   320                                                   ply_shm = shared_memory.SharedMemory(name=shared_data['ply_counts']['shm_name'])
   321                                                   ply_counts = np.ndarray(tuple(shared_data['ply_counts']['shape']), 
   322                                                                          dtype=np.dtype(shared_data['ply_counts']['dtype']), 
   323                                                                          buffer=ply_shm.buf)
   324                                                   
   325                                                   # Access move columns
   326                                                   move_columns = {}
   327                                                   move_shms = {}
   328                                                   for col, col_info in shared_data['move_columns'].items():
   329                                                       shm = shared_memory.SharedMemory(name=col_info['shm_name'])
   330                                                       move_shms[col] = shm
   331                                                       move_columns[col] = np.ndarray(tuple(col_info['shape']), 
   332                                                                                    dtype=np.dtype(col_info['dtype']), 
   333                                                                                    buffer=shm.buf)
   334                                                   
   335                                                   # Process games
   336                                                   for game_id in game_indices_chunk:
   337                                                       try:
   338                                                           idx = game_indices_list.index(game_id)
   339                                                           ply_count = int(ply_counts[idx])
   340                                                           moves = {col: move_columns[col][idx] for col in move_columns}
   341                                                           
   342                                                           # Process game
   343                                                           result = play_one_game(game_id, ply_count, moves, 
   344                                                                                w_agent, b_agent, environ)
   345                                                           if result is not None:
   346                                                               corrupted_games.append(result)
   347                                                           
   348                                                           # Reset for next game
   349                                                           environ.reset_environ()
   350                                                           
   351                                                       except ValueError:
   352                                                           logger.critical(f"Game {game_id} not found in indices")
   353                                                           corrupted_games.append(game_id)
   354                                                       except Exception as e:
   355                                                           logger.critical(f"Error processing game {game_id}: {e}")
   356                                                           corrupted_games.append(game_id)
   357                                                   
   358                                                   # Clean up shared memory access
   359                                                   indices_shm.close()
   360                                                   ply_shm.close()
   361                                                   for shm in move_shms.values():
   362                                                       shm.close()
   363                                               
   364                                               return corrupted_games

Total time: 0 s
File: C:\Users\Abrah\Dropbox\PC (3)\Desktop\clean-chess-db\training\game_simulation.py
Function: play_one_game at line 366

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   366                                           def play_one_game(game_id: str, 
   367                                                             ply_count: int, 
   368                                                             moves: Dict[str, str], 
   369                                                             w_agent: Agent, 
   370                                                             b_agent: Agent, 
   371                                                             environ: Environ) -> Optional[str]:
   372                                               """
   373                                               Process a single game.
   374                                               
   375                                               Args:
   376                                                   game_id: Game identifier
   377                                                   ply_count: Total number of plies (half-moves) in the game
   378                                                   moves: Dictionary of moves by turn
   379                                                   w_agent: White player agent
   380                                                   b_agent: Black player agent
   381                                                   environ: Chess environment
   382                                                   
   383                                               Returns:
   384                                                   game_id if corrupted, None if successful
   385                                               """
   386                                               while True:
   387                                                   # Get current state
   388                                                   curr_state, legal_moves = environ.get_curr_state_and_legal_moves()
   389                                                   
   390                                                   # Check termination conditions
   391                                                   if curr_state['turn_index'] >= ply_count:
   392                                                       break
   393                                                   if environ.board.is_game_over():
   394                                                       break
   395                                                   
   396                                                   # Determine which agent's turn
   397                                                   curr_turn = curr_state['curr_turn']
   398                                                   agent = w_agent if curr_state['white_to_move'] else b_agent
   399                                                   
   400                                                   # Get move from game data
   401                                                   chess_move_san = agent.choose_action(moves, curr_turn)
   402                                                   
   403                                                   # Handle empty moves
   404                                                   if chess_move_san == '' or pd.isna(chess_move_san):
   405                                                       environ.update_curr_state()
   406                                                       continue
   407                                                   
   408                                                   # Convert and validate move
   409                                                   try:
   410                                                       move_obj = environ.convert_san_to_move_object(chess_move_san)
   411                                                   except ValueError:
   412                                                       logger.critical(f"Invalid move format '{chess_move_san}' "
   413                                                                     f"for game {game_id}, turn {curr_turn}")
   414                                                       return game_id
   415                                                   
   416                                                   # Check if move is legal
   417                                                   if move_obj not in legal_moves:
   418                                                       logger.critical(f"Illegal move '{chess_move_san}' "
   419                                                                     f"for game {game_id}, turn {curr_turn}")
   420                                                       return game_id
   421                                                   
   422                                                   # Apply move
   423                                                   environ.push_move_object(move_obj)
   424                                               
   425                                               return None  # Game processed successfully

